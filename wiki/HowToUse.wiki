#summary How to use django-dynamic-media-serve in real world.

After install the Django and `Django Dynamic Media Serve`, run or restart your web server.

= Post Installation =
== Locate Your Media ==
All the media files must be located in `document_root` directory of `urls.py`. This is my `urls.py` conf.
{{{
from django.conf.urls.defaults import *

urlpatterns = patterns('',
        # Uncomment this for admin:
        #(r'^admin/', include('django.contrib.admin.urls')),
        (r"^__media__/(?P<path>.*)$", 
                "dynamic_media_serve.serve", {"document_root": "/home/spike/django-runtime/__media__"}
    ),
)
}}}
I set the `document_root` to `/home/spike/django-runtime/__media__` and I copy my media files to this directory.
{{{
spike@spike:~/django-runtime$ mkdir __media__
spike@spike:~/django-runtime$ cp /tmp/my_images/frontpage.png __media__
}}}

== Open up Your Browser and Check it ==
Open the location, `http://<domain>/__media__/frontpage.png`.
Do you see your image?

= Get Dynamically Resizing Image =
*Available Query String*
|| *key* || *type* || *description* ||
|| width || integer || thumbnail image width ||
|| height || integer || thumbnail image height ||
|| mode || 'ratio'(default), 'sooa' || thumbnail style ||
|| update|| <anything you want> || refresh ||

== Creating By Image Size Ratio ==
 * `http://<domain>/__media__/frontpage.png?width=<new width>&height=<new height>&mode=ratio` : full query
 * `http://<domain>/__media__/frontpage.png?width=<new width>&mode=ratio` : only width
 * `http://<domain>/__media__/frontpage.png?height=<new height>&mode=ratio` : only height

== Creating Flicker Style Thumbnail ==
`http://<domain>/__media__/frontpage.png?width=<new width>&height=<new height>&mode=sooa`


= Get The Compressed Javascript File =
*Available Query String*
|| *key* || *type* || *description* ||
|| compress || 'gzip', 'deflate' || set whether compress the script file or not ||
|| update|| <anything you want> || refresh ||


= Access and Fetch the External Media ==
== Image ==
*Available Query String*
|| *key* || *type* || *description* ||
|| width || integer || thumbnail image width ||
|| height || integer || thumbnail image height ||
|| mode || 'ratio'(default), 'sooa' || thumbnail style ||
|| update|| <anything you want> || refresh ||

== Javascript ==
*Available Query String*
|| *key* || *type* || *description* ||
|| compress || 'gzip', 'deflate' || set whether compress the script file or not ||
|| update|| <anything you want> || refresh ||


== plain text file like xml, html, or txt ==
*Available Query String*
|| *key* || *type* || *description* ||
|| compress || 'gzip', 'deflate' || set whether compress the script file or not ||
|| update|| <anything you want> || refresh ||


It's so simple and support all feature of `Django Dynamic Media Serve`. 
{{{
http://<domain>/__media__/<base64 encoded URL>?<available query string>
}}}

== Cross-Domain Access ==
Most of the decent web browsers in these days can not allow to access the url over the domains like this. For examples, I run this script in <my domain>.com.
{{{
Ajax.Request(
 "http://<my domain>.com/get_my_profile/",
 {
  onComplete: function(request)
  {
    alert("success");
  }
);
}}}
it's ok, but this could not work,
{{{
Ajax.Request(
 "http://<my other managed domain>.com/get_my_profile/",
 {
  onFailure: function(request)
  {
    alert("failed to access");
  },
  onComplete: function(request)
  {
    alert("success");
  }
);
}}}

In this case, `Django Dynamic Media Serve` can give you the another way to access the other domains like this,
{{{
Ajax.Request(
 "http://<domain>/__media__/http%3A%2F%2F<my other managed domain>.com%2Fget_my_profile%2F",
 {
  onFailure: function(request)
  {
    alert("failed to access");
  },
  onComplete: function(request)
  {
    alert("success");
  }
);
}}}
The original url, `http://<my other managed domain>.com/get_my_profile/` was changed to `http%3A%2F%2F<my other managed domain>.com%2Fget_my_profile%2F`. To be clearly handle the URI, `Django Dynamic Media Serve` only get the `base64` encoded URI.